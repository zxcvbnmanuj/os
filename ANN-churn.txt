# Import necessary libraries
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from matplotlib import pyplot
from sklearn.model_selection import train_test_split
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import RobustScaler, OneHotEncoder
from sklearn.metrics import confusion_matrix, precision_score, accuracy_score, recall_score
from sklearn.linear_model import LogisticRegression

# Load the Churn Modeling dataset from the specified CSV file into a Pandas DataFrame
df = pd.read_csv("C:/Users/HP/Downloads/Final Practical ML/Final Practical ML/Churn_Modelling.csv")

# Display the first few rows of the DataFrame
df.head()

# Display summary statistics of the dataset
df.describe()

# Drop unnecessary columns 'CustomerId' and 'Surname'
df.drop(['CustomerId', 'Surname'], axis=1, inplace=True)

# Separate features (x) and target variable (y)
x = df.drop('Exited', axis=1)
y = df.Exited

# Display the count of each class in the target variable
y.value_counts()

# Split the data into training and testing sets (80% training, 20% testing)
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)

# Define numerical and categorical columns
num_cols = ['CreditScore', 'Age', 'Tenure', 'Balance', 'NumOfProducts', 'EstimatedSalary']
cat_cols = ['Geography', 'Gender', 'HasCrCard', 'IsActiveMember']

# Create a pipeline with preprocessing and logistic regression model
pipeline = Pipeline(steps=[
    ('ct', ColumnTransformer(transformers=[
        ("s1", RobustScaler(), num_cols),
        ("s2", OneHotEncoder(handle_unknown='ignore'), cat_cols)
    ])),
    ('mod', LogisticRegression(random_state=0))
])

# Fit the pipeline on the training data
pipeline.fit(x_train, y_train)

# Make predictions on the test set
preds = pipeline.predict(x_test)
print(preds[:15])

# Display the confusion matrix
print(confusion_matrix(y_test, preds))

# Display the confusion matrix with specified labels (0, 1)
print(confusion_matrix(y_test, preds, labels=(0, 1)))
